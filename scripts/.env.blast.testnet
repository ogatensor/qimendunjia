# Blast Contracts Environment Variables for Testnet
NETWORK_NAME=Blast Sepolia
RPC_ENDPOINT=https://sepolia.blast.io
CHAIN_ID=168587773
CURRENCY_SYMBOL=ETH
BLOCK_EXPLORER=https://testnet.blastscan.io

# Mainnet Launch Notice
# The Blast mainnet is coming late February.
# Withdrawal Information
# The withdrawal process from Blast is similar to that of Optimism. 
# It involves a period of approximately 14 days to complete. 
# This is to ensure the security of the Layer 2 solution and to prevent potential double-spend attacks.
# Detailed instructions or code samples for this process are not included in this current file.
# However, we are working on providing a comprehensive guide on how to safely and efficiently withdraw your assets from Blast. Please stay tuned for updates.

# L1 Contract Addresses
L1_BLAST_BRIDGE_PROXY=0xc644cc19d2A9388b71dd1dEde07cFFC73237Dca8
L1_STANDARD_BRIDGE_PROXY=0xDeDa8D3CCf044fE2A16217846B6e1f1cfD8e122f
L1_ERC721_BRIDGE_PROXY=0x993385F8A2aD69dfa0884287801191DE9805Ff37
L1_CROSS_DOMAIN_MESSENGER_PROXY=0x9338F298F29D3918D5D1Feb209aeB9915CC96333
OPTIMISM_PORTAL_PROXY=0x2757E4430e694F27b73EC9C02257cab3a498C8C5
ETH_YIELD_MANAGER_PROXY=0xed530ba33b4dc14572864bb9a776c9a42cf89fa5
L2_OUTPUT_ORACLE_PROXY=0x311fF72DfE214ADF97618DD2E731637E8F41bD8c
SYSTEM_CONFIG_PROXY=0x329faF078c364A316e08Bf6A17B7Eee6ae75a613
TESTNET_YIELD_PROVIDER=0x26B1B9Ff3A25a7D6e4468fA94696e45d066c7d08

# L2 Contract Addresses
L2_TO_L1_MESSAGE_PASSER=0x4200000000000000000000000000000000000016
L2_CROSS_DOMAIN_MESSENGER=0x4200000000000000000000000000000000000007
L2_STANDARD_BRIDGE=0x4200000000000000000000000000000000000010
OPTIMISM_MINTABLE_ERC20_FACTORY=0x4200000000000000000000000000000000000012
L2_ERC721_BRIDGE=0x4200000000000000000000000000000000000014
OPTIMISM_MINTABLE_ERC721_FACTORY=0x4200000000000000000000000000000000000017
USDB=0x4200000000000000000000000000000000000022
WETH_REBASING=0x4200000000000000000000000000000000000023
L2_BLAST_BRIDGE=0x4200000000000000000000000000000000000024

# Bridged Token Addresses for Testnet
TESTNET_WETH=0x4200000000000000000000000000000000000023
TESTNET_USDB=0x4200000000000000000000000000000000000022

# Deposit Instructions
## ETH
L1_BLAST_BRIDGE_PROXY=0xc644cc19d2A9388b71dd1dEde07cFFC73237Dca8

## Other tokens
L1_STANDARD_BRIDGE_PROXY=0xDeDa8D3CCf044fE2A16217846B6e1f1cfD8e122f
L1_ERC721_BRIDGE_PROXY=0x993385F8A2aD69dfa0884287801191DE9805Ff37

# How to deposit to Blast

# Overview
# To deposit ETH and other tokens to Blast, simply transfer the token to the relevant Blast Bridge address on the L1.

# After the deposit transaction is mined, the balance will be credited on the L2 as soon as the Blast Sequencer indexes the transaction.

# ETH
# Transfer ETH via the tool of your choice to the following bridge address on Ethereum Sepolia: 
# L1_BLAST_BRIDGE_PROXY=0xc644cc19d2A9388b71dd1dEde07cFFC73237Dca8

# WETH, STETH, USDC, USDT, DAI
# Depositing Ethereum Sepolia WETH, STETH, USDC, USDT, DAI will be supported in the future, but is currently not supported on the Blast Sepolia testnet.

# Blast Sepolia ETH can be wrapped to WETH directly on the L2 (see Foundry example below).

# Other tokens
# Blast supports bridging arbitrary tokens in a similar manner to Optimism. Refer to the Optimism docs to learn how to bridge arbitrary tokens.

# Bridge address for arbitrary ERC20 tokens (L1StandardBridge): 
# L1_STANDARD_BRIDGE_PROXY=0xDeDa8D3CCf044fE2A16217846B6e1f1cfD8e122f

# Bridge address for arbitrary ERC721 tokens (L1ERC721Bridge): 
# L1_ERC721_BRIDGE_PROXY=0x993385F8A2aD69dfa0884287801191DE9805Ff37

# Deposit via UI
# Coming soon

# Deposit programmatically
# You can use any tool/wallet to send the transfer transaction to the Blast Bridge address. Here are some examples:

# Foundry
# The following code snippet shows how to use Foundryâ€™s cast tool to send ETH from Ethereum Sepolia to Blast Sepolia, and then convert that ETH to WETH.

# Depositing Sepolia ETH 
# cast send -i 0xc644cc19d2A9388b71dd1dEde07cFFC73237Dca8 --value 0.1ether --rpc-url https://sepolia.infura.io/v3/$INFURA_KEY

# Confirming the bridged ETH on Blast
# cast balance $YOUR_ADDRESS --rpc-url https://sepolia.blast.io

# Converting to WETH (Rebasing)
# cast send -i 0x4200000000000000000000000000000000000023 --value 0.1ether --rpc-url https://sepolia.blast.io 

# ethers.js
# The following code snips shows how to use ethers.js to send ETH from Ethereum Sepolia to Blast Sepolia.

# const { ethers } = require("ethers");

# const INFURA_KEY = "YOUR_INFURA_KEY";
# const PRIVATE_KEY = "YOUR_PRIVATE_KEY";

# const BlastBridgeAddress = "0xc644cc19d2A9388b71dd1dEde07cFFC73237Dca8";

# Providers for Sepolia and Blast networks
# const sepoliaProvider = new ethers.providers.JsonRpcProvider(`https://sepolia.infura.io/v3/${INFURA_KEY}`);
# const blastProvider = new ethers.providers.JsonRpcProvider("https://sepolia.blast.io");

# Wallet setup
# const wallet = new ethers.Wallet(PRIVATE_KEY);
# const sepoliaWallet = wallet.connect(sepoliaProvider);
# const blastWallet = wallet.connect(blastProvider);

# Transaction to send 0.1 Sepolia ETH
# const tx = {
#     to: BlastBridgeAddress,
#     value: ethers.utils.parseEther("0.1")
# };

# const transaction = await sepoliaWallet.sendTransaction(tx);
# await transaction.wait();

# Confirm the bridged balance on Blast
# const balance = await blastProvider.getBalance(wallet.address);
# console.log(`Balance on Blast: ${ethers.utils.formatEther(balance)} ETH`);

# How to withdraw from Blast
# Withdrawals from Blast require multiple steps. The process is similar to withdrawing from Optimism. Withdrawals take approximately 14 days to complete. Detailed instructions/code samples coming soon.
